name: 🚀 Deploy Nero Application

on:
  push:
    branches: [ master, main, dev ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    environment: ${{ github.ref == 'refs/heads/dev' && 'development' || 'production' }}
    
    steps:
    - name: ✅ Checkout Code
      uses: actions/checkout@v4

    - name: ✅ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          package-lock.json
          panel/package-lock.json

    - name: 📦 Install Server Dependencies
      run: |
        echo "📦 Installing server dependencies..."
        cd server
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          echo "⚠️ No package-lock.json found, using npm install..."
          npm install
        fi
        cd ..

    - name: 📦 Install Web Dependencies
      run: |
        echo "📦 Installing web dependencies..."
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          echo "⚠️ No package-lock.json found, using npm install..."
          npm install
        fi

    - name: 📦 Install Panel Dependencies
      run: |
        echo "📦 Installing panel dependencies..."
        cd panel
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          echo "⚠️ No package-lock.json found, using npm install..."
          npm install
        fi
        cd ..

    - name: 🔍 Determine Environment
      id: env
      run: |
        if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "server_host=${{ secrets.DEV_SERVER_HOST || secrets.SERVER_HOST }}" >> $GITHUB_OUTPUT
          echo "server_username=${{ secrets.DEV_SERVER_USERNAME || secrets.SERVER_USERNAME }}" >> $GITHUB_OUTPUT
          echo "server_password=${{ secrets.DEV_SERVER_PASSWORD || secrets.SERVER_PASSWORD }}" >> $GITHUB_OUTPUT
          echo "server_port=${{ secrets.DEV_SERVER_PORT || secrets.SERVER_PORT || '22' }}" >> $GITHUB_OUTPUT
          echo "app_name=nero-dev" >> $GITHUB_OUTPUT
          echo "app_port=3001" >> $GITHUB_OUTPUT
          echo "app_path=/var/www/nero-dev" >> $GITHUB_OUTPUT
          echo "api_url=http://dev.takemyphoto.xyz" >> $GITHUB_OUTPUT
          echo "web_url=http://dev.takemyphoto.xyz" >> $GITHUB_OUTPUT
        else
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "server_host=${{ secrets.SERVER_HOST }}" >> $GITHUB_OUTPUT
          echo "server_username=${{ secrets.SERVER_USERNAME }}" >> $GITHUB_OUTPUT
          echo "server_password=${{ secrets.SERVER_PASSWORD }}" >> $GITHUB_OUTPUT
          echo "server_port=${{ secrets.SERVER_PORT || '22' }}" >> $GITHUB_OUTPUT
          echo "app_name=nero" >> $GITHUB_OUTPUT
          echo "app_port=3000" >> $GITHUB_OUTPUT
          echo "app_path=/var/www/nero" >> $GITHUB_OUTPUT
          echo "api_url=http://takemyphoto.xyz" >> $GITHUB_OUTPUT
          echo "web_url=http://takemyphoto.xyz" >> $GITHUB_OUTPUT
        fi

    - name: 🔧 Extract PORT from ENV secret (optional)
      id: extract_port
      shell: bash
      run: |
        if [ -n "${{ secrets.ENV }}" ]; then
          echo "${{ secrets.ENV }}" > env_payload.txt
          PORT_VALUE=$(grep -E '^PORT=' env_payload.txt | head -n1 | cut -d'=' -f2- | tr -d '\r')
          if [ -n "$PORT_VALUE" ]; then
            echo "port=$PORT_VALUE" >> $GITHUB_OUTPUT
            echo "Detected PORT from ENV secret: $PORT_VALUE"
          fi
          rm -f env_payload.txt
        fi

    - name: 🔧 Decide App Port
      id: port
      run: |
        DEFAULT_PORT="${{ steps.env.outputs.app_port }}"
        EXTRACTED="${{ steps.extract_port.outputs.port }}"
        if [ -n "$EXTRACTED" ]; then
          echo "app_port=$EXTRACTED" >> $GITHUB_OUTPUT
        else
          echo "app_port=$DEFAULT_PORT" >> $GITHUB_OUTPUT
        fi

    - name: 🔨 Build Server
      run: |
        echo "🔨 Building server..."
        cd server
        if [ "${{ steps.env.outputs.environment }}" == "development" ]; then
          NODE_ENV=development npm run build
        else
          NODE_ENV=production npm run build
        fi
        cd ..

    - name: 🔨 Build Web Application
      run: |
        echo "🔨 Building web application..."
        
        # Build web app with environment variables
        if [ "${{ steps.env.outputs.environment }}" == "development" ]; then
          VITE_API_URL=${{ steps.env.outputs.api_url }}/api \
          VITE_GOOGLE_CLIENT_ID=${{ secrets.DEV_GOOGLE_CLIENT_ID || secrets.GOOGLE_CLIENT_ID }} \
          npm run build
        else
          VITE_API_URL=${{ steps.env.outputs.api_url }}/api \
          VITE_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
          npm run build
        fi
        
        # Verify build was successful
        if [ ! -d "dist" ]; then
          echo "❌ Error: Web build failed - dist directory not found"
          exit 1
        fi
        
        echo "✅ Web application built successfully"

    - name: 🔨 Build Admin Panel
      run: |
        echo "🔨 Building admin panel..."
        cd panel
        
        # Build admin panel with environment variables
        if [ "${{ steps.env.outputs.environment }}" == "development" ]; then
          VITE_API_URL=${{ steps.env.outputs.api_url }}/api npm run build
        else
          VITE_API_URL=${{ steps.env.outputs.api_url }}/api npm run build
        fi
        
        # Verify build was successful
        if [ ! -d "dist" ]; then
          echo "❌ Error: Panel build failed - dist directory not found"
          exit 1
        fi
        
        echo "✅ Admin panel built successfully"
        cd ..

    # ✅ Deploy backend code
    - name: ✅ Deploy Server Code
      uses: appleboy/ssh-action@v1.0.3
      env:
        ENV_FILE: ${{ github.ref == 'refs/heads/dev' && secrets.DEV_ENV || secrets.ENV }}
        WEB_ENV_FILE: ${{ github.ref == 'refs/heads/dev' && secrets.DEV_WEB_ENV || secrets.WEB_ENV }}
      with:
        host: ${{ steps.env.outputs.server_host }}
        username: ${{ steps.env.outputs.server_username }}
        password: ${{ steps.env.outputs.server_password }}
        port: ${{ steps.env.outputs.server_port }}
        envs: ENV_FILE,WEB_ENV_FILE
        script: |
          echo "🔍 Navigating to app path: ${{ steps.env.outputs.app_path }}"
          
          # Create directory if it doesn't exist
          mkdir -p ${{ steps.env.outputs.app_path }}
          cd ${{ steps.env.outputs.app_path }}
          
          # Clone or pull latest code
          if [ ! -d ".git" ]; then
            echo "🔄 Cloning repository..."
            # Remove any existing files first
            rm -rf * .[^.]* 2>/dev/null || true
            git clone ${{ github.server_url }}/${{ github.repository }}.git .
          else
            echo "🔄 Pulling latest code..."
            git fetch origin ${{ steps.env.outputs.environment == 'development' && 'dev' || 'master' }}
            git reset --hard origin/${{ steps.env.outputs.environment == 'development' && 'dev' || 'master' }}
          fi

          # Write server .env file from GitHub secret
          echo "📝 Writing server environment file to server/.env"
          mkdir -p server
          echo "$ENV_FILE" > server/.env
          chmod 600 server/.env
          echo "✅ Server .env written"
          
          # Write web .env file for frontend build
          echo "📝 Writing web environment file to .env"
          if [ -n "$WEB_ENV_FILE" ]; then
            echo "$WEB_ENV_FILE" > .env
            chmod 600 .env
            echo "✅ Web .env written"
          else
            echo "⚠️  WEB_ENV_FILE not set, creating default .env"
            printf "%s\n" \
              "VITE_API_URL=${{ steps.env.outputs.api_url }}/api" \
              "VITE_GOOGLE_CLIENT_ID=${{ secrets.DEV_GOOGLE_CLIENT_ID || secrets.GOOGLE_CLIENT_ID }}" \
              "VITE_FIREBASE_API_KEY=AIzaSyB_xb9MsTagBJY0XmFIgr9H-6Jcz_mPjPw" \
              "VITE_FIREBASE_AUTH_DOMAIN=nero-d9eec.firebaseapp.com" \
              "VITE_FIREBASE_PROJECT_ID=nero-d9eec" \
              "VITE_FIREBASE_STORAGE_BUCKET=nero-d9eec.firebasestorage.app" \
              "VITE_FIREBASE_MESSAGING_SENDER_ID=448577746795" \
              "VITE_FIREBASE_APP_ID=1:448577746795:web:a9368454f2b7864ccefe2e" \
              "VITE_FIREBASE_MEASUREMENT_ID=G-TN1ZGWZLQ1" \
              > .env
            chmod 600 .env
            echo "✅ Default web .env created"
          fi
          
          echo "📦 Installing server dependencies..."
          cd server
          
          # Check if package-lock.json exists, if not use npm install
          # Ensure devDependencies are installed (needed for build: tsc, tsc-alias)
          export npm_config_production=false
          if [ -f "package-lock.json" ]; then
            npm ci || { echo "⚠️ npm ci failed, falling back to npm install"; npm install || { echo "❌ npm install failed"; exit 1; }; }
          else
            echo "⚠️ No package-lock.json found, using npm install..."
            npm install || { echo "❌ npm install failed"; exit 1; }
          fi
          
          # Verify node_modules exists
          if [ ! -d "node_modules" ]; then
            echo "❌ Error: node_modules directory not created after npm install"
            exit 1
          fi
          echo "✅ Dependencies installed"

          echo "🔨 Building server..."
          # Verify package.json exists before building
          if [ ! -f "package.json" ]; then
            echo "❌ Error: package.json not found in server directory"
            ls -la
            exit 1
          fi
          
          npm run build || { echo "❌ npm run build failed"; exit 1; }
          
          # Verify build was successful
          if [ ! -d "dist" ]; then
            echo "❌ Error: Build failed - dist directory not found"
            ls -la
            exit 1
          fi
          
          echo "✅ Server built"
          
          # Build Web Application
          echo "🔨 Building web application..."
          cd ..
          
          # Install web dependencies if needed
          export npm_config_production=false
          if [ -f "package-lock.json" ]; then
            npm ci || { echo "⚠️ npm ci failed for web, falling back to npm install"; npm install || { echo "❌ npm install failed for web"; exit 1; }; }
          else
            echo "⚠️ No package-lock.json found, using npm install..."
            npm install || { echo "❌ npm install failed for web"; exit 1; }
          fi
          
          # Verify node_modules exists
          if [ ! -d "node_modules" ]; then
            echo "❌ Error: node_modules directory not created for web"
            exit 1
          fi
          
          # Build web app with environment variables
          if [ "${{ steps.env.outputs.environment }}" == "development" ]; then
            VITE_API_URL=${{ steps.env.outputs.api_url }}/api \
            VITE_GOOGLE_CLIENT_ID=${{ secrets.DEV_GOOGLE_CLIENT_ID || secrets.GOOGLE_CLIENT_ID }} \
            npm run build || { echo "❌ npm run build failed for web"; exit 1; }
          else
            VITE_API_URL=${{ steps.env.outputs.api_url }}/api \
            VITE_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            npm run build || { echo "❌ npm run build failed for web"; exit 1; }
          fi
          
          # Verify web build was successful
          if [ ! -d "dist" ]; then
            echo "❌ Error: Web build failed - dist directory not found"
            ls -la
            exit 1
          fi
          
          # Verify dist has files
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Error: Web build incomplete - index.html not found in dist"
            ls -la dist/
            exit 1
          fi
          
          echo "✅ Web application built successfully"
          echo "📊 Web dist contents:"
          ls -lh dist/ | head -20
          
          # Build Admin Panel
          echo "🔨 Building admin panel..."
          cd panel
          
          # Install panel dependencies if needed
          export npm_config_production=false
          if [ -f "package-lock.json" ]; then
            npm ci || { echo "⚠️ npm ci failed for panel, falling back to npm install"; npm install || { echo "❌ npm install failed for panel"; exit 1; }; }
          else
            echo "⚠️ No package-lock.json found, using npm install..."
            npm install || { echo "❌ npm install failed for panel"; exit 1; }
          fi
          
          # Verify node_modules exists
          if [ ! -d "node_modules" ]; then
            echo "❌ Error: node_modules directory not created for panel"
            exit 1
          fi
          
          # Build admin panel with environment variables
          if [ "${{ steps.env.outputs.environment }}" == "development" ]; then
            VITE_API_URL=${{ steps.env.outputs.api_url }}/api npm run build || { echo "❌ npm run build failed for panel"; exit 1; }
          else
            VITE_API_URL=${{ steps.env.outputs.api_url }}/api npm run build || { echo "❌ npm run build failed for panel"; exit 1; }
          fi
          
          # Verify panel build was successful
          if [ ! -d "dist" ]; then
            echo "❌ Error: Panel build failed - dist directory not found"
            ls -la
            exit 1
          fi
          
          echo "✅ Admin panel built successfully"
          
          # Create uploads directory if it doesn't exist
          cd ..
          mkdir -p server/uploads
          echo "✅ Uploads directory ready"

    # ✅ Finalize Web Build On Server (as requested)
    - name: ✅ Finalize Web Build On Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ steps.env.outputs.server_host }}
        username: ${{ steps.env.outputs.server_username }}
        password: ${{ steps.env.outputs.server_password }}
        port: ${{ steps.env.outputs.server_port }}
        script: |
          echo "🔍 Finalizing web build in: ${{ steps.env.outputs.app_path }}"
          cd ${{ steps.env.outputs.app_path }}

          # Ensure devDependencies are installed for build
          export npm_config_production=false
          echo "📦 Running npm ci (fallback to npm install)"
          if [ -f "package-lock.json" ]; then
            npm ci || { echo "⚠️ npm ci failed, falling back to npm install"; npm install || { echo "❌ npm install failed"; exit 1; }; }
          else
            echo "⚠️ No package-lock.json found, using npm install..."
            npm install || { echo "❌ npm install failed"; exit 1; }
          fi

          echo "🔨 Running npm run build in app root"
          npm run build || { echo "❌ npm run build failed in app root"; exit 1; }

          # Verify web dist exists
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Error: Web build not found after finalize step (dist/index.html missing)"
            ls -la dist || true
            exit 1
          fi
          echo "✅ Final web build verified"

    # ✅ Restart PM2
    - name: ✅ Restart PM2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ steps.env.outputs.server_host }}
        username: ${{ steps.env.outputs.server_username }}
        password: ${{ steps.env.outputs.server_password }}
        port: ${{ steps.env.outputs.server_port }}
        script: |
          echo "🔍 Using app path: ${{ steps.env.outputs.app_path }}/server"
          cd ${{ steps.env.outputs.app_path }}/server

          # Verify built files exist before restarting
          echo "🔍 Verifying build artifacts..."
          if [ ! -f "dist/index.js" ]; then
            echo "❌ Error: Server build not found (dist/index.js missing)"
            exit 1
          fi
          if [ ! -f "../dist/index.html" ]; then
            echo "❌ Error: Web build not found (../dist/index.html missing)"
            exit 1
          fi
          if [ ! -f "../panel/dist/index.html" ]; then
            echo "❌ Error: Panel build not found (../panel/dist/index.html missing)"
            exit 1
          fi
          echo "✅ All build artifacts verified"

          # Ensure environment is set for the process
          export NODE_ENV=${{ steps.env.outputs.environment }}
          export PORT=${{ steps.port.outputs.app_port }}

          # Start or restart the app with the correct CWD
          if pm2 describe ${{ steps.env.outputs.app_name }} > /dev/null 2>&1; then
            echo "🔄 Restarting existing PM2 app with tsconfig-paths"
            pm2 restart ${{ steps.env.outputs.app_name }} --update-env --node-args '-r tsconfig-paths/register'
          else
            echo "🚀 Starting PM2 app for the first time with tsconfig-paths"
            pm2 start dist/index.js --name ${{ steps.env.outputs.app_name }} --cwd ${{ steps.env.outputs.app_path }}/server --node-args '-r tsconfig-paths/register'
          fi

          pm2 save
          pm2 status ${{ steps.env.outputs.app_name }}
          echo "✅ PM2 process started/restarted"
          
          # Show recent logs to verify startup
          echo "📋 Recent PM2 logs:"
          pm2 logs ${{ steps.env.outputs.app_name }} --lines 20 --nostream

    # ✅ Health Check
    - name: ✅ Health Check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ steps.env.outputs.server_host }}
        username: ${{ steps.env.outputs.server_username }}
        password: ${{ steps.env.outputs.server_password }}
        port: ${{ steps.env.outputs.server_port }}
        script: |
          echo "⏳ Waiting for application to start..."
          sleep 15
          ATTEMPTS=10
          for i in $(seq 1 $ATTEMPTS); do
            if curl -fsS http://127.0.0.1:${{ steps.port.outputs.app_port }}/health > /dev/null; then
              echo "✅ Application is healthy"
              exit 0
            fi
            echo "⌛ Attempt $i/$ATTEMPTS failed, retrying in 5s..."
            sleep 5
          done
          echo "❌ Application health check failed after $ATTEMPTS attempts"
          pm2 logs ${{ steps.env.outputs.app_name }} --lines 50
          exit 1

    # ✅ Deployment Summary
    - name: ✅ Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📊 Summary:"
        echo "- Environment: ${{ steps.env.outputs.environment }}"
        echo "- API URL: ${{ steps.env.outputs.api_url }}"
        echo "- Web URL: ${{ steps.env.outputs.web_url }}"
        echo "- App Port: ${{ steps.port.outputs.app_port }}"
        echo "- PM2 App Name: ${{ steps.env.outputs.app_name }}"
